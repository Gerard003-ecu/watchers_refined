# ==============================================================================
# Configuración de Docker Compose para el Monorepositorio de Watchers
#
# Este archivo define la configuración de la aplicación multicontenedor para el proyecto "watchers".
# Está diseñado con las mejores prácticas para garantizar robustez, facilidad de mantenimiento y seguridad.
#
# Características clave:
#   - Configuración externalizada: Utiliza un archivo .env para variables específicas del entorno
#     como los puertos, lo que reduce los valores codificados.
#   - DRY (Don't Repeat Yourself): Aprovecha los campos de extensión YAML (x-common-config)
#     para definir una plantilla de configuración común para todos los servicios.
#   - Inicio basado en comprobación de estado: Utiliza `depends_on` con `service_healthy`
#     para garantizar un orden de inicio fiable según las dependencias del servicio.
#   - Nomenclatura explícita: Define nombres personalizados para contenedores, redes y volúmenes
#     para mayor claridad y previsibilidad.
#
# ==============================================================================
version: '3.8'

# ==============================================================================
# Campos de extensión (para el principio DRY)
#
# Define un bloque de configuración reutilizable que se aplica a todos los servicios.
# Esto evita la repetición y facilita el mantenimiento del archivo.
# ==============================================================================
x-common-config: &common-config
  restart: unless-stopped
  # Monta un volumen compartido para almacenar en caché los paquetes Pip,
  # lo que acelera las compilaciones.
  volumes:
    - pip-cache:/root/.cache/pip
  # Conecta todos los servicios a una red de puente con un nombre personalizado.
  networks:
    - watchers_net
  # Establece una variable de entorno común para todos los servicios.
  environment:
    - PYTHONPATH=/app

# ==============================================================================
# Definición de Servicios
#
# Cada bloque define un contenedor de microservicio.
# ==============================================================================
services:
  # --- Servicios pincipales ---

  ecu:
    # Aplica la plantilla de configuración común.
    <<: *common-config
    container_name: watchers-ecu
    build:
      context: ./ecu
      dockerfile: Dockerfile
    user: "${UID}:${GID}"
    ports:
      # La asignación de puertos se externaliza al archivo .env
      - "${ECU_PORT}:8000"
    environment:
      - ECU_NUM_CAPAS=3
      - ECU_NUM_FILAS=4
      - ECU_NUM_COLUMNAS=5
      - ECU_SIM_INTERVAL=1.0
      - ECU_BETA_COUPLING=0.1
      - MATRIZ_ECU_PORT=8000
      - PORT=8000
    # HEALTHCHECK esta definido en el archivo Dockerfile.

  harmony_controller:
    <<: *common-config
    container_name: watchers-harmony-controller
    build:
      context: ./control
      dockerfile: Dockerfile
    user: "${UID}:${GID}"
    ports:
      - "${HARMONY_CONTROLLER_PORT}:7000"
    environment:
      - ECU_API_URL=http://ecu:8000/api/ecu
      - HC_KP=1.0
      - HC_KI=0.1
      - HC_KD=0.05
      - HC_SETPOINT_VECTOR=[1.0, 0.0]
      - HC_INTERVAL=1.0
      - HC_REQUESTS_TIMEOUT=2.0
      - HC_MAX_RETRIES=3
      - HC_BASE_RETRY_DELAY=0.5
      - HC_PORT=7000
    depends_on:
      ecu:
        # Espera a que el servicio 'ecu' esté en buen estado antes de comenzar.
        condition: service_healthy

  # --- Servicios de Watchers ---

  malla_watcher:
    <<: *common-config
    container_name: watchers-malla-watcher
    build:
      context: ./watchers/watchers_tools/malla_watcher
      dockerfile: Dockerfile
    user: "${UID}:${GID}"
    ports:
      - "${MALLA_WATCHER_PORT}:5001"
    environment:
      - MATRIZ_ECU_URL=http://ecu:8000
      - TORUS_NUM_CAPAS=3
      - TORUS_NUM_FILAS=4
      - TORUS_NUM_COLUMNAS=5
      - MW_INFLUENCE_THRESHOLD=5.0
      - MW_MAX_AMPLITUDE_NORM=20.0
      - MW_REQUESTS_TIMEOUT=2.0
      - MW_BASE_T=0.6
      - MW_BASE_E=0.1
      - MW_K_GAIN_T=0.1
      - MW_K_GAIN_E=0.05
      - MW_RADIUS=5.0
      - MW_HEIGHT_SEG=6
      - MW_CIRCUM_SEG=12
      - MW_HEX_SIZE=1.0
      - MW_PERIODIC_Z=True
      - MW_SIM_INTERVAL=0.5
      - PORT=5001
    depends_on:
      ecu:
        condition: service_healthy

  watchers_wave:
    <<: *common-config
    container_name: watchers-watchers-wave
    build:
      context: ./watchers/watchers_tools/watchers_wave
      dockerfile: Dockerfile
    user: "${UID}:${GID}"
    ports:
      - "${WATCHERS_WAVE_PORT}:5000"
    environment:
      - PORT=5000

  watcher_focus:
    <<: *common-config
    container_name: watchers-watcher-focus
    build:
      context: ./watchers/watchers_tools/watcher_focus
      dockerfile: Dockerfile
    user: "${UID}:${GID}"
    ports:
      - "${WATCHER_FOCUS_PORT}:6000"
    environment:
      - PORT=6000

  # --- Servicios de inteligencia artificial y agentes ---

  agent_ai:
    <<: *common-config
    container_name: watchers-agent-ai
    build:
      context: ./agent_ai
      dockerfile: Dockerfile
    user: "${UID}:${GID}"
    ports:
      - "${AGENT_AI_PORT}:9000"
    environment:
      - HARMONY_CONTROLLER_URL=http://harmony_controller:7000
      - AGENT_AI_ECU_URL=http://ecu:8000
      - AGENT_AI_MALLA_URL=http://malla_watcher:5001
      - PORT=9000
      - AA_INTERVAL=5.0
      - AA_REQUESTS_TIMEOUT=4.0
      - AA_MAX_RETRIES=3
      - AA_BASE_RETRY_DELAY=0.5
      - AA_INITIAL_STRATEGY=default
      - AA_INITIAL_SETPOINT_VECTOR=[1.0, 0.0]
      - AA_GLOBAL_REQ_PATH=/app/requirements.txt
    depends_on:
      harmony_controller:
        condition: service_healthy
      malla_watcher:
        condition: service_healthy

# ==============================================================================
# Recursos de alto nivel
#
# Define volúmenes y redes con nombre para la aplicación.
# ==============================================================================
volumes:
  # Define un volumen con nombre para que la caché Pip persista entre compilaciones.
  pip-cache:
    name: watchers_pip_cache

networks:
  # Define una red de puente personalizada para la comunicación entre servicios.
  watchers_net:
    name: watchers_bridge_net
    driver: bridge
