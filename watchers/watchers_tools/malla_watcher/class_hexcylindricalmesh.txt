# --- Clase HexCylindricalMesh (Gestor de la Malla) ---
class HexCylindricalMesh:
    """
    Gestiona la malla hexagonal cilíndrica.
    Permite condiciones de contorno periódicas opcionales en Z.
    Almacena el campo vectorial externo recibido de ECU.
    """
    def __init__(self, radius: float, height_segments: int, circumference_segments: int,
                 hex_size: float = 1.0, periodic_z: bool = False):
        """
        Inicializa la malla hexagonal cilíndrica.

        Args:
            radius (float): Radio del cilindro.
            height_segments (int): Número de 'anillos' hexagonales a lo largo de la altura (eje z).
                                     Define la extensión vertical de la malla generada.
            circumference_segments (int): Número aproximado de hexágonos alrededor de la circunferencia.
                                         Se ajustará para cerrar el cilindro.
            hex_size (float): Tamaño característico del hexágono (distancia entre centros).
            periodic_z (bool): Si es True, activa condiciones de contorno periódicas en el eje Z
                               (las celdas superior e inferior se conectan). Por defecto es False.
        """
        self.radius = radius
        self.height_segments = height_segments
        self.hex_size = hex_size
        self.periodic_z = periodic_z
        self.circumference = 2 * math.pi * radius

        hex_width = 3.0 / 2.0 * self.hex_size
        num_hex_circum = round(self.circumference / hex_width) if hex_width > 0 else 1
        self.circumference_segments_actual = max(1, num_hex_circum)
        self.actual_circumference_covered = self.circumference_segments_actual * hex_width
        logger.info(f"Ajustando segmentos de circunferencia a {self.circumference_segments_actual} para radio {radius} y hex_size {hex_size}")
        if not math.isclose(self.actual_circumference_covered, self.circumference, rel_tol=0.05):
             logger.warning(f"Circunferencia no cierra exactamente. Real: {self.actual_circumference_covered:.3f}, Teórica: {self.circumference:.3f}")

        self.cells: dict[tuple[int, int], Cell] = {}
        self.min_z: float = 0.0
        self.max_z: float = 0.0
        self.total_height_approx: float = 0.0

        # NUEVO: Almacenar el campo vectorial externo recibido
        self.external_vector_field: Optional[List[List[List[float]]]] = None # Almacenar la estructura recibida de ECU

        self._initialize_mesh()
        if self.cells:
            self._calculate_z_bounds()

    def _calculate_z_bounds(self):
        """Calcula los límites Z mínimo y máximo reales de las celdas existentes."""
        if not self.cells:
            self.min_z = 0.0
            self.max_z = 0.0
            logger.warning("Intentando calcular límites Z en malla vacía.")
            return

        z_values = [cell.z for cell in self.cells.values()]
        self.min_z = min(z_values)
        self.max_z = max(z_values)
        logger.info(f"Límites Z calculados: min={self.min_z:.2f}, max={self.max_z:.2f}. Altura aprox. por segmentos: {self.total_height_approx:.2f}")

    def _initialize_mesh(self):
        """
        Crea las celdas de la malla hexagonal cilíndrica usando BFS optimizado.
        Calcula la altura teórica y los límites Z iniciales.
        """
        logger.info(f"Inicializando malla hexagonal cilíndrica (periodic_z={self.periodic_z})...")
        self.cells.clear()

        hex_row_height = math.sqrt(3.0) / 2.0 * self.hex_size
        # Ajuste en el cálculo de la altura total aproximada
        self.total_height_approx = self.height_segments * hex_row_height * 2 if self.height_segments > 0 else hex_row_height * 2
    
        # Los límites estrictos son el rango Z que queremos cubrir con los segmentos de altura
        strict_min_z = -self.total_height_approx / 2.0
        strict_max_z = self.total_height_approx / 2.0
    
        # Un margen de exploración para el BFS para encontrar vecinos en los bordes
        height_margin = hex_row_height * 2
    
        logger.info(f"Dims Calculadas: Circum={self.circumference:.2f}, hex_w={self.hex_size * 1.5:.2f}, "
                f"row_h={hex_row_height:.2f}, num_q={self.circumference_segments_actual}, "
                f"total_h_aprox={self.total_height_approx:.2f}, z_range_estricto=[{strict_min_z:.2f}, {strict_max_z:.2f}], margin={height_margin:.2f}")
    
        # Usar collections.deque para operaciones O(1) en ambos extremos
        from collections import deque
        queue = deque()
        processed_coords = set()
    
        start_q, start_r = 0, 0
        _, start_y_flat = axial_to_cartesian_flat(start_q, start_r, self.hex_size)
    
        # Loguear si la celda inicial está fuera del rango Z estricto
        if not (strict_min_z - EPSILON <= start_y_flat <= strict_max_z + EPSILON):
            logger.warning(f"La celda inicial ({start_q},{start_r}) con z={start_y_flat:.2f} está fuera del rango Z estricto [{strict_min_z:.2f}, {strict_max_z:.2f}].")
            # Si la altura es muy pequeña, aseguramos que al menos la celda inicial se considere
            if self.height_segments <= 1:
                logger.warning("Altura de segmentos baja (<=1), forzando inclusión de celda inicial.")
                if start_y_flat < strict_min_z: strict_min_z = start_y_flat
                if start_y_flat > strict_max_z: strict_max_z = start_y_flat
    
        queue.append((start_q, start_r))
        processed_coords.add((start_q, start_r))
        logger.info(f"Celda inicial ({start_q},{start_r}) añadida a la cola.")
    
        cells_added_count = 0
        processed_in_loop_count = 0
        log_interval = 100
        max_iterations = 100000  # Límite de seguridad para el BFS
    
        # Cálculo del límite de q para evitar sobre-exploración
        q_exploration_limit = self.circumference_segments_actual * 2
    
        while queue and processed_in_loop_count < max_iterations:
             processed_in_loop_count += 1
             if processed_in_loop_count % log_interval == 0:
                logger.debug(f"Iteración BFS #{processed_in_loop_count}. Queue size: {len(queue)}. Cells added: {cells_added_count}. Processed set size: {len(processed_coords)}")
        
             q, r = queue.popleft()  # Usar popleft() O(1) en lugar de pop(0) O(n)
             axial_key = (q, r)
        
             x_flat, y_flat = axial_to_cartesian_flat(q, r, self.hex_size)
             cyl_r, cyl_theta, cyl_z = cartesian_flat_to_cylindrical(x_flat, y_flat, self.radius)
        
             # Determinar si la celda está dentro del rango Z estricto o solo dentro del margen de exploración
             is_within_strict_z = (strict_min_z - EPSILON <= cyl_z <= strict_max_z + EPSILON)
             is_within_explore_margin_z = (strict_min_z - height_margin - EPSILON <= cyl_z <= strict_max_z + height_margin + EPSILON)
        
             # Si está fuera incluso del margen de exploración, la descartamos y no exploramos sus vecinos
             if not is_within_explore_margin_z:
                 continue
        
             # Si está dentro del rango Z estricto, la añadimos a la malla
             if is_within_strict_z:
                 if axial_key not in self.cells:
                    self.cells[axial_key] = Cell(cyl_r, cyl_theta, cyl_z, q, r, q_vector=np.zeros(2))
                    cells_added_count += 1
                    if cells_added_count % log_interval == 0:
                        logger.info(f"--> Celda añadida #{cells_added_count}: {axial_key} (z={cyl_z:.2f})")
        
             # Explorar vecinos si la celda está dentro del margen de exploración
             theoretical_neighbors = self.get_axial_neighbors(q, r)
             for nq, nr in theoretical_neighbors:
                 neighbor_key = (nq, nr)
                 if neighbor_key not in processed_coords:
                    # Limitar exploración en q para evitar mallas excesivamente anchas si el radio es grande
                    # DESCOMENTAR y AJUSTAR la siguiente línea - crucial para evitar la sobre-exploración
                    if abs(nq) > q_exploration_limit:
                        continue
                
                    _, neighbor_y_flat = axial_to_cartesian_flat(nq, nr, self.hex_size)
                    # Solo añadir a la cola si el vecino está dentro del margen de exploración Z
                    if strict_min_z - height_margin - EPSILON <= neighbor_y_flat <= strict_max_z + height_margin + EPSILON:
                        processed_coords.add(neighbor_key)
                        queue.append(neighbor_key)
    
        if processed_in_loop_count == max_iterations:
             logger.warning(f"BFS detenido por alcanzar el límite de iteraciones ({max_iterations}). ¡Posible bucle o exploración excesiva!")
    
        logger.info(f"Malla inicializada con {len(self.cells)} celdas. ({processed_in_loop_count} iteraciones BFS)")
        if len(self.cells) > 0:
             # Calcular los límites Z reales después de añadir todas las celdas
             self._calculate_z_bounds()
             # Ejecutar verificación de conectividad al finalizar la inicialización
             self.verify_connectivity()
        else:
             logger.error("¡No se generaron celdas! Revisa parámetros y lógica de expansión.")

    def verify_connectivity(self) -> Dict[int, int]:
        """
        Verifica la conectividad interna de la malla contando los vecinos
        reales (existentes en la malla, considerando periodicidad si está activa)
        para cada celda. Loguea advertencias para celdas con conectividad inesperada.

        Returns:
            Dict[int, int]: Distribución del número de vecinos por celda.
        """
        if not self.cells:
            logger.warning("Intento de verificar conectividad en una malla vacía.")
            return {}

        neighbor_counts = Counter()
        min_neighbors_found = 7 # Inicializar con un valor mayor que el máximo posible
        max_neighbors_found = -1 # Inicializar con un valor menor que el mínimo posible

        logger.info(f"Verificando conectividad de {len(self.cells)} celdas (periodic_z={self.periodic_z})...")

        # Iterar sobre todas las celdas para contar sus vecinos reales
        for cell in self.cells.values():
            actual_neighbors = self.get_neighbor_cells(cell.q_axial, cell.r_axial)
            actual_neighbor_count = len(actual_neighbors)

            neighbor_counts[actual_neighbor_count] += 1
            min_neighbors_found = min(min_neighbors_found, actual_neighbor_count)
            max_neighbors_found = max(max_neighbors_found, actual_neighbor_count)

            # Loguear advertencia/error para celdas con un número inusual de vecinos
            # En una malla hexagonal ideal, las celdas internas tienen 6 vecinos.
            # Las celdas en bordes (si no hay periodicidad) o con problemas pueden tener menos.
            # Tener más de 6 vecinos es un error grave en la lógica de get_neighbor_cells.
            if actual_neighbor_count > 6:
                 logger.error(f"  ERROR: Celda ({cell.q_axial},{cell.r_axial}) tiene {actual_neighbor_count} vecinos. Esto indica un error en la lógica de búsqueda de vecinos.")
            elif actual_neighbor_count < 3: # Muy pocos vecinos, probablemente un problema grave
                 logger.warning(f"  WARNING: Celda ({cell.q_axial},{cell.r_axial}) tiene solo {actual_neighbor_count} vecinos. Podría ser un hueco o borde inesperado.")
            elif actual_neighbor_count < 6 and not self.periodic_z and self.height_segments > 1:
                 # Si no es periódica en Z y hay múltiples segmentos, las celdas en los bordes Z deberían tener 4 o 5 vecinos.
                 # Menos de 4 podría ser un problema.
                 if actual_neighbor_count < 4 and not self.periodic_z:
                    logger.warning(f"Celda ({cell.q_axial},{cell.r_axial}) en borde tiene {actual_neighbor_count} vecinos (esperado >= 4).")
                 elif actual_neighbor_count < 6 and self.periodic_z:
                     logger.warning(f"Celda ({cell.q_axial},{cell.r_axial}) con periodic_z tiene {actual_neighbor_count} vecinos (esperado 6).")

        result_dict = dict(sorted(neighbor_counts.items()))
        logger.info(f"Verificación de conectividad completada. Distribución (NumVecinos: NumCeldas): {result_dict}")
        logger.info(f"  Mínimo vecinos encontrados: {min_neighbors_found}, Máximo vecinos encontrados: {max_neighbors_found}")

        # Resumen final basado en los rangos encontrados
        if len(self.cells) > 0:
            if max_neighbors_found > 6:
                 logger.error("¡ERROR CRÍTICO! Se encontraron celdas con más de 6 vecinos.")
                 # No retornar aquí, permitir que el dict se devuelva para análisis
            if min_neighbors_found < 3:
                 logger.warning("ADVERTENCIA: Se encontraron celdas con muy pocos vecinos (<3).")
                 # No retornar aquí
            # Podríamos añadir más heurísticas aquí si es necesario

        return result_dict # Devuelve el diccionario de conteos

    def get_cell(self, q: int, r: int) -> Optional[Cell]:
        """Obtiene una celda por sus coordenadas axiales."""
        return self.cells.get((q, r))

    def get_axial_neighbors(self, q: int, r: int) -> List[tuple[int, int]]:
        """Obtiene las coordenadas axiales de los 6 vecinos hexagonales teóricos."""
        axial_directions = [
            (1, 0), (1, -1), (0, -1),
            (-1, 0), (-1, 1), (0, 1)
        ]
        return [(q + dq, r + dr) for dq, dr in axial_directions]

    def get_neighbor_cells(self, q: int, r: int) -> List[Cell]:
        """
        Obtiene los objetos Cell de los vecinos existentes en la malla.
        Si self.periodic_z es True, intenta encontrar vecinos envueltos
        verticalmente si no existen directamente.
        """
        neighbor_cells = []
        theoretical_neighbors = self.get_axial_neighbors(q, r)
        current_cell = self.get_cell(q, r)
    
        if not current_cell:
            logger.warning(f"Celda ({q},{r}) no existe en la malla.")
            return []  # Retornar lista vacía si la celda central no existe
    
         # Esta indentación estaba incorrecta en el original, 
         # todo el código siguiente estaba dentro del if not current_cell
        for nq, nr in theoretical_neighbors:
             # Ajustar q para periodicidad cilíndrica
             nq_wrapped = nq % self.circumference_segments_actual
             if nq_wrapped < 0:
                 nq_wrapped += self.circumference_segments_actual
            
             # Intentar primero obtener el vecino directo con q envuelto
             neighbor_cell = self.get_cell(nq_wrapped, nr)
        
             if neighbor_cell:
                 neighbor_cells.append(neighbor_cell)
             elif self.periodic_z and self.total_height_approx > EPSILON:
                 # Si no se encuentra directamente y periodic_z está activo,
                 # buscar un vecino equivalente en la dirección Z
                 _, target_z_flat = axial_to_cartesian_flat(nq, nr, self.hex_size)
                 wrapped_cell = self._find_closest_z_neighbor(nq_wrapped, target_z_flat)
                 if wrapped_cell:
                     neighbor_cells.append(wrapped_cell)
    
        return neighbor_cells

    def _find_closest_z_neighbor(self, target_q: int, target_z_flat: float) -> Optional[Cell]:
        """
        Helper para encontrar la celda existente con la coordenada Z más cercana
        a target_z_flat *envuelta* y cuya coordenada q coincida al aplicar el módulo circunferencial.
        Usado para encontrar vecinos periódicos en Z.
        """
        best_match: Optional[Cell] = None
        min_dz_wrapped = float('inf')
    
        # Calcular la coordenada q esperada en el cilindro envuelto
        target_q_wrapped = target_q % self.circumference_segments_actual
        if target_q_wrapped < 0:
            target_q_wrapped += self.circumference_segments_actual
    
        logger.debug(f"    Buscando celda con q_wrapped={target_q_wrapped} y z cercana a target_z_flat={target_z_flat:.2f} (envuelta)...")
    
        # Necesitamos el rango Z real de la malla para calcular distancias envueltas
        if self.max_z - self.min_z <= EPSILON:
            logger.debug("    Altura real de la malla es cero o negativa, no se pueden encontrar vecinos envueltos.")
            return None
    
        real_height = self.max_z - self.min_z
    
        # Mantener registro de celdas "por arriba" y "por abajo" para una mejor selección direccional
        upper_match = None
        lower_match = None
        min_upper_dz = float('inf')
        min_lower_dz = float('inf')
    
        # Iterar sobre todas las celdas existentes para encontrar la mejor coincidencia
        for cell in self.cells.values():
            cell_q_wrapped = cell.q_axial % self.circumference_segments_actual
            if cell_q_wrapped < 0:
                cell_q_wrapped += self.circumference_segments_actual
        
            # Comparamos la coordenada q envuelta
            if cell_q_wrapped == target_q_wrapped:
                # Calcular la distancia envuelta en Z considerando periodicidad
                # Distancia directa
                dz_direct = abs(cell.z - target_z_flat)
            
                # Distancia si envolvemos hacia arriba (target_z + altura)
                dz_wrap_up = abs(cell.z - (target_z_flat + real_height))
            
                # Distancia si envolvemos hacia abajo (target_z - altura)
                dz_wrap_down = abs(cell.z - (target_z_flat - real_height))
            
                # Tomar la distancia mínima entre las tres opciones
                dz = min(dz_direct, dz_wrap_up, dz_wrap_down)
            
                # Registrar en qué dirección está esta celda respecto al target
                if cell.z > target_z_flat:
                    if dz < min_upper_dz:
                        min_upper_dz = dz
                        upper_match = cell
                else:
                    if dz < min_lower_dz:
                        min_lower_dz = dz
                        lower_match = cell
            
                # Para compatibilidad, seguimos buscando el match general
                if dz < min_dz_wrapped:
                    min_dz_wrapped = dz
                    best_match = cell
                    logger.debug(f"      -> Mejor match actual: ({best_match.q_axial},{best_match.r_axial}) con dz={min_dz_wrapped:.4f}")
    
        # Después de revisar todas las celdas, elegimos la mejor match direccional si existe
        # Aumentamos la tolerancia para adaptarnos a posibles mallas no uniformes
        tolerance = self.hex_size * 1.0  # Más permisivo que antes
    
        # Preferir match direccional si existe y está dentro de tolerancia
        if min_upper_dz < tolerance and min_lower_dz < tolerance:
            # Si tenemos matches arriba y abajo, elegir el más cercano
            if min_upper_dz <= min_lower_dz:
                logger.debug(f"      Seleccionado match superior: ({upper_match.q_axial},{upper_match.r_axial}) con dz={min_upper_dz:.4f}")
                return upper_match
            else:
                logger.debug(f"      Seleccionado match inferior: ({lower_match.q_axial},{lower_match.r_axial}) con dz={min_lower_dz:.4f}")
                return lower_match
        elif min_upper_dz < tolerance:
            logger.debug(f"      Solo match superior disponible: ({upper_match.q_axial},{upper_match.r_axial}) con dz={min_upper_dz:.4f}")
            return upper_match
        elif min_lower_dz < tolerance:
            logger.debug(f"      Solo match inferior disponible: ({lower_match.q_axial},{lower_match.r_axial}) con dz={min_lower_dz:.4f}")
            return lower_match
    
        # Si no tenemos matches direccionales válidos, caer al mejor match general
        if best_match and min_dz_wrapped < tolerance:
            logger.debug(f"      Usando mejor match general: ({best_match.q_axial},{best_match.r_axial}) con dz={min_dz_wrapped:.4f}")
            return best_match
        else:
            logger.debug(f"      No se encontró vecino en Z para q={target_q_wrapped}, z={target_z_flat:.2f} (dz={min_dz_wrapped:.2f} > tolerancia={tolerance:.2f})")
            return None

    def get_all_cells(self) -> List[Cell]:
        """Retorna una lista de todas las celdas en la malla."""
        return list(self.cells.values())

    def apply_external_field(self, field_vector_map: List[List[List[float]]]):
        """
        Aplica un campo vectorial externo (ej. campo V de ECU) a las celdas de la malla,
        actualizando su q_vector usando interpolación bilineal.

        Args:
            field_vector_map (List[List[List[float]]]): Lista de arrays 2D (filas x columnas)
                                                        de vectores 2D, representando el campo
                                                        externo por capa. Shape: [num_capas_torus, num_rows_torus, num_cols_torus, 2].
        """
        if not self.cells:
            logger.warning("Intento de aplicar campo externo a malla vacía.")
            return
        if not isinstance(field_vector_map, list) or not field_vector_map:
             logger.error(f"El campo vectorial externo debe ser una lista no vacía. Recibido: {type(field_vector_map)}")
             return

        # Convertir la lista de listas a un array NumPy para facilitar el acceso e interpolación
        try:
            field_vector_np = np.array(field_vector_map, dtype=float)
            if field_vector_np.ndim != 4 or field_vector_np.shape[-1] != 2:
                 logger.error(f"El campo vectorial externo no tiene el shape esperado [capas, filas, columnas, 2]. Recibido: {field_vector_np.shape}")
                 return
        except (ValueError, TypeError) as e:
             logger.error(f"Error al convertir field_vector_map a NumPy array: {e}")
             return

        logger.debug(f"Aplicando campo vectorial externo (shape={field_vector_np.shape}) a la malla cilíndrica usando interpolación bilineal...")
        num_capas_torus, num_rows_torus, num_cols_torus, _ = field_vector_np.shape

        if num_capas_torus <= 0 or num_rows_torus <= 0 or num_cols_torus <= 0:
            logger.error("El campo vectorial externo tiene dimensiones inválidas (<= 0).")
            return

        # Almacenar el campo recibido (opcional, pero útil para depuración o cálculos futuros)
        self.external_vector_field = field_vector_map

        current_z_values = [cell.z for cell in self.cells.values()]
        if not current_z_values:
            logger.warning("No hay celdas para aplicar campo externo.")
            return
        cylinder_z_min = min(current_z_values)
        cylinder_z_max = max(current_z_values)
        cylinder_height = cylinder_z_max - cylinder_z_min

        update_count = 0
        for cell in self.cells.values():
            try:
                # Mapear coordenadas cilíndricas (theta, z) a coordenadas 2D (col, row) del toroide
                # Theta mapea a la dimensión toroidal (columnas)
                col_float = (cell.theta / (2 * math.pi)) * num_cols_torus
                col_float = max(0.0, min(col_float, num_cols_torus - EPSILON))

                # Z mapea a la dimensión poloidal/vertical (filas)
                row_float = 0.0
                if cylinder_height > EPSILON:
                    normalized_z = (cell.z - cylinder_z_min) / cylinder_height
                    row_float = normalized_z * (num_rows_torus -1)
                    row_float = max(0.0, min(row_float, num_rows_torus - 1.0 - EPSILON))

                # Mapear la capa del toroide a la capa de la malla (o usar una capa representativa)
                # Por ahora, vamos a interpolar solo desde la capa 0 del toroide para simplificar,
                # o podríamos promediar/sumar sobre capas relevantes.
                # Para una analogía más rica, podríamos mapear la "profundidad" radial de la celda
                # (si tuvieran radios variables) a la capa del toroide.
                # Dado que todas las celdas tienen el mismo radio, usemos una capa fija o promedio.
                # Usemos la capa 0 del toroide como fuente principal por ahora.
                capa_idx_torus = 0 # Simplificación: usar solo la primera capa del toroide

                r1 = math.floor(row_float)
                c1 = math.floor(col_float)

                c1_idx = c1 % num_cols_torus
                c2_idx = (c1 + 1) % num_cols_torus
                r1_idx = max(0, min(r1, num_rows_torus - 1))
                r2_idx = max(0, min(r1 + 1, num_rows_torus - 1))

                # Obtener los 4 vectores en los puntos de la grilla del toroide para interpolación
                v11 = field_vector_np[capa_idx_torus, r1_idx, c1_idx, :]
                v12 = field_vector_np[capa_idx_torus, r1_idx, c2_idx, :]
                v21 = field_vector_np[capa_idx_torus, r2_idx, c1_idx, :]
                v22 = field_vector_np[capa_idx_torus, r2_idx, c2_idx, :]

                dr = row_float - r1
                dc = col_float - c1

                # Interpolación bilineal para cada componente del vector
                interp_vx = (v11[0] * (1 - dr) * (1 - dc) +
                             v21[0] * dr * (1 - dc) +
                             v12[0] * (1 - dr) * dc +
                             v22[0] * dr * dc)

                interp_vy = (v11[1] * (1 - dr) * (1 - dc) +
                             v21[1] * dr * (1 - dc) +
                             v12[1] * (1 - dr) * dc +
                             v22[1] * dr * dc)

                # Asignar el vector interpolado a la celda
                cell.q_vector = np.array([interp_vx, interp_vy], dtype=float)
                update_count += 1

            except IndexError:
                 logger.warning(f"Índice fuera de rango al acceder a field_vector_np. Celda ({cell.q_axial},{cell.r_axial}) mapeada a ({row_float:.2f},{col_float:.2f}) en capa {capa_idx_torus}. Índices: r1={r1_idx}, r2={r2_idx}, c1={c1_idx}, c2={c2_idx}. Shape: {field_vector_np.shape}")
            except Exception as e:
                 logger.error(f"Error inesperado durante interpolación vectorial para celda ({cell.q_axial},{cell.r_axial}): {e}", exc_info=True)

        logger.debug(f"Campo vectorial externo aplicado a {update_count}/{len(self.cells)} celdas mediante interpolación.")
